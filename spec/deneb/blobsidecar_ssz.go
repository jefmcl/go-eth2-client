// Code generated by fastssz. DO NOT EDIT.
// Hash: c59fedc368399ea089ef168af817b9c0364224eac8f48a46fa302643af53b511
// Version: 0.1.3
package deneb

import (
	"github.com/jefmcl/go-eth2-client/spec/phase0"
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the BlobSidecar object
func (b *BlobSidecar) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(b)
}

// MarshalSSZTo ssz marshals the BlobSidecar object to a target array
func (b *BlobSidecar) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'BlockRoot'
	dst = append(dst, b.BlockRoot[:]...)

	// Field (1) 'Index'
	dst = ssz.MarshalUint64(dst, uint64(b.Index))

	// Field (2) 'Slot'
	dst = ssz.MarshalUint64(dst, uint64(b.Slot))

	// Field (3) 'BlockParentRoot'
	dst = append(dst, b.BlockParentRoot[:]...)

	// Field (4) 'ProposerIndex'
	dst = ssz.MarshalUint64(dst, uint64(b.ProposerIndex))

	// Field (5) 'Blob'
	dst = append(dst, b.Blob[:]...)

	// Field (6) 'KzgCommitment'
	dst = append(dst, b.KzgCommitment[:]...)

	// Field (7) 'KzgProof'
	dst = append(dst, b.KzgProof[:]...)

	return
}

// UnmarshalSSZ ssz unmarshals the BlobSidecar object
func (b *BlobSidecar) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 131256 {
		return ssz.ErrSize
	}

	// Field (0) 'BlockRoot'
	copy(b.BlockRoot[:], buf[0:32])

	// Field (1) 'Index'
	b.Index = BlobIndex(ssz.UnmarshallUint64(buf[32:40]))

	// Field (2) 'Slot'
	b.Slot = phase0.Slot(ssz.UnmarshallUint64(buf[40:48]))

	// Field (3) 'BlockParentRoot'
	copy(b.BlockParentRoot[:], buf[48:80])

	// Field (4) 'ProposerIndex'
	b.ProposerIndex = phase0.ValidatorIndex(ssz.UnmarshallUint64(buf[80:88]))

	// Field (5) 'Blob'
	copy(b.Blob[:], buf[88:131160])

	// Field (6) 'KzgCommitment'
	copy(b.KzgCommitment[:], buf[131160:131208])

	// Field (7) 'KzgProof'
	copy(b.KzgProof[:], buf[131208:131256])

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the BlobSidecar object
func (b *BlobSidecar) SizeSSZ() (size int) {
	size = 131256
	return
}

// HashTreeRoot ssz hashes the BlobSidecar object
func (b *BlobSidecar) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(b)
}

// HashTreeRootWith ssz hashes the BlobSidecar object with a hasher
func (b *BlobSidecar) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'BlockRoot'
	hh.PutBytes(b.BlockRoot[:])

	// Field (1) 'Index'
	hh.PutUint64(uint64(b.Index))

	// Field (2) 'Slot'
	hh.PutUint64(uint64(b.Slot))

	// Field (3) 'BlockParentRoot'
	hh.PutBytes(b.BlockParentRoot[:])

	// Field (4) 'ProposerIndex'
	hh.PutUint64(uint64(b.ProposerIndex))

	// Field (5) 'Blob'
	hh.PutBytes(b.Blob[:])

	// Field (6) 'KzgCommitment'
	hh.PutBytes(b.KzgCommitment[:])

	// Field (7) 'KzgProof'
	hh.PutBytes(b.KzgProof[:])

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the BlobSidecar object
func (b *BlobSidecar) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(b)
}
